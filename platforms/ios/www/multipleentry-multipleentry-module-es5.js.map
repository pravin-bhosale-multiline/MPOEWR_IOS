{"version":3,"sources":["./src/app/multipleentry/multipleentry.page.html","./src/app/multipleentry/multipleentry-routing.module.ts","./src/app/multipleentry/multipleentry.module.ts","./src/app/multipleentry/multipleentry.page.scss","./src/app/multipleentry/multipleentry.page.ts"],"names":[],"mappings":"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","file":"multipleentry-multipleentry-module-es5.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-title>Multiple Entry</ion-title>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button defaultHref=\\\"section\\\"></ion-back-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <form [formGroup]=\\\"myForm\\\">\\n    <ion-item *ngFor=\\\"let control of myForm.controls | keyvalue\\\">\\n      <ion-input\\n        required\\n        type=\\\"text\\\"\\n        [formControlName]=\\\"control.key\\\"\\n        placeHolder=\\\"Enter Value...\\\"\\n      ></ion-input>\\n      <ion-icon (click)=\\\"removeControl(control)\\\" name=\\\"close-circle\\\"></ion-icon>\\n    </ion-item>\\n  </form>\\n  <ion-button expand=\\\"full\\\" color=\\\"primary\\\" (click)=\\\"addControl()\\\">Add Input</ion-button>\\n  <ion-button expand=\\\"full\\\" color=\\\"primary\\\" [disabled]=\\\"!myForm.valid\\\" (click)=\\\"onSubmit()\\\">Submit</ion-button>\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { MultipleentryPage } from './multipleentry.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MultipleentryPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MultipleentryPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { MultipleentryPageRoutingModule } from './multipleentry-routing.module';\n\nimport { MultipleentryPage } from './multipleentry.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    MultipleentryPageRoutingModule\n  ],\n  declarations: [MultipleentryPage]\n})\nexport class MultipleentryPageModule {}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL211bHRpcGxlZW50cnkvbXVsdGlwbGVlbnRyeS5wYWdlLnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, NavigationExtras, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-multipleentry',\n  templateUrl: './multipleentry.page.html',\n  styleUrls: ['./multipleentry.page.scss'],\n})\nexport class MultipleentryPage implements OnInit {\n  public myForm: FormGroup;\n  private noofcontrol: number = 1;\n  question: any;\n  constructor(private formBuilder: FormBuilder,private route: ActivatedRoute\n    ,private router: Router) { \n    this.myForm = formBuilder.group({\n      control1: ['', Validators.required]\n    });\n  }\n\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      if (this.router.getCurrentNavigation().extras.state) {\n        this.question= this.router.getCurrentNavigation().extras.state.question;\n        \n      }\n    });\n  }\n  addControl(){\n    this.noofcontrol=this.noofcontrol+1;\n    this.myForm.addControl('control' + this.noofcontrol, new FormControl('', Validators.required));\n  }\n  removeControl(control){\n    this.myForm.removeControl(control.key);\n    this.noofcontrol=this.noofcontrol-1;\n  }\n  onSubmit(){\n    let finalvalue='';\n    Object.keys(this.myForm.controls).forEach(key => {\n      finalvalue=finalvalue+','+this.myForm.get(key).value;\n    });\n    this.question.ans=finalvalue.substring(1);\n    let navigationExtras: NavigationExtras = {\n      state: {\n        question:this.question\n        \n      }\n    };\n    this.router.navigate(['section'],navigationExtras);\n  }\n}\n"],"sourceRoot":""}