{"version":3,"sources":["./src/app/jobtransfer/jobtransfer.page.html","./src/app/jobtransfer/jobtransfer.module.ts","./src/app/jobtransfer/jobtransfer.page.scss","./src/app/jobtransfer/jobtransfer.page.ts"],"names":[],"mappings":"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","file":"jobtransfer-jobtransfer-module-es5.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Job Transfer</ion-title>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button defaultHref=\\\"joblist\\\"></ion-back-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-card>\\n      <ion-grid fix>\\n          <ion-row >\\n              <ion-col >\\n                <ion-item >\\n                    <ion-label color=\\\"primary\\\" position=\\\"stacked\\\">Transfer To.</ion-label>\\n                    <ion-select #C [ngModel]=\\\"selectedUser\\\" (ionChange)=\\\"onChange(C.value)\\\" multiple=\\\"false\\\" placeholder=\\\"Select User\\\">\\n                      <ion-select-option *ngFor=\\\"let users of userlist\\\" [value]=\\\"users\\\">{{users.user$_identifier}}</ion-select-option>\\n                    </ion-select>\\n                  </ion-item>\\n                </ion-col>\\n              </ion-row>\\n                <ion-row>\\n                <ion-col >\\n                  <ion-item>\\n                      <ion-label  position=\\\"stacked\\\">Reason</ion-label>\\n                      <ion-input  type=\\\"text\\\" [(ngModel)]=\\\"sreason\\\" placeholder=\\\"Reason\\\" ></ion-input>\\n                  </ion-item>\\n                </ion-col>\\n              </ion-row>\\n                <ion-row>\\n                <ion-col >\\n                  <ion-item>\\n                      <ion-button (click)=\\\"onGo()\\\">\\n                          Go\\n                      </ion-button>\\n                  </ion-item>\\n              </ion-col>\\n              </ion-row>\\n              <ion-row>\\n              <ion-col>\\n                  <ion-text color=\\\"danger\\\">{{txterror}}</ion-text>\\n              </ion-col>\\n            </ion-row>\\n      </ion-grid>\\n </ion-card>\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { JobtransferPage } from './jobtransfer.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: JobtransferPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [JobtransferPage]\n})\nexport class JobtransferPageModule {}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2pvYnRyYW5zZmVyL2pvYnRyYW5zZmVyLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { Joblist } from '../joblist/joblist.page';\nimport { LoginauthService } from '../login/loginauth.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { LoadingController } from '@ionic/angular';\n/* get User ID */\nexport interface User {\n  user$_identifier: string;\n  user: string;\n}\n@Component({\n  selector: 'app-jobtransfer',\n  templateUrl: './jobtransfer.page.html',\n  styleUrls: ['./jobtransfer.page.scss'],\n})\nexport class JobtransferPage implements OnInit {\n  userlist: User[];\n  jobid;\n  job: Joblist[];\n  selectedUser: User;\n  sreason;\n  txterror: string;\n  constructor(private loginservc: LoginauthService,\n              private route: ActivatedRoute, private router: Router\n            , private loadingController: LoadingController) { }\n\n  ngOnInit() {\n    this.loadingController.create({\n      duration: 5000,\n      spinner: 'circles',\n      message: 'Please Wait...'}).then((res) => {\n        res.present(); });\n    this.route.params.subscribe(params => {\n      this.jobid = params['jobid'];\n      \n      this.loginservc.getjob(this.jobid).subscribe(data => {\n        const response = data['response'];\n        this.job = response['data'];\n        \n        this.loginservc.getuserlist(this.job[0].mwmsJobtype).subscribe(userdata => {\n          const response1 = userdata['response'];\n          this.userlist = response1['data'];\n          this.loadingController.dismiss();\n        });\n      });\n    });\n  }\n  onChange(user: User) {\n    this.selectedUser = user;\n  }\n  onGo() {\n    if (this.sreason === undefined || this.selectedUser === undefined) {\n      this.txterror = 'All Fields Are Mendetory.';\n      \n    } else {\n      \n      this.loginservc.transferJob(this.jobid, this.selectedUser.user, this.sreason).subscribe(data => {\n        this.txterror = 'Success.';\n        this.router.navigateByUrl('/joblist');\n      });\n    }\n    // use this.selecteduser and job to transfer web service\n  }\n}\n"],"sourceRoot":""}